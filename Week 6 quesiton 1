

    #include <iostream>  
    using namespace std;  
    class BinTreeNode {  
    public:  
        BinTreeNode(int value) {  
            this->value = value;  
            this->left = NULL;  
            this->right = NULL;  
        }  
        int value;  
        BinTreeNode* left;  
        BinTreeNode* right;  
      
    };  
      
    BinTreeNode* MinimumValue(BinTreeNode* root)  
    {  
        while(root->left != NULL) root = root->left;  
        return root;  
    }  
      
    BinTreeNode* tree_insert(BinTreeNode* tree, int item) {  
        if (tree == NULL)  
            tree = new BinTreeNode(item);  
        else  
            if (item < tree->value)  
                if (tree->left == NULL)  
                    tree->left = new BinTreeNode(item);  
                else  
                    tree_insert(tree->left, item);  
            else  
                if (tree->right == NULL)  
                    tree->right = new BinTreeNode(item);  
                else  
                    tree_insert(tree->right, item);  
        return tree;  
      
    }  
      
    void postorder(BinTreeNode* tree) {  
        if (tree->left != NULL)  
            postorder(tree->left);  
        if (tree->right != NULL)  
            postorder(tree->right);  
        std::cout << tree->value << std::endl;  
      
    }  
      
    void in_order(BinTreeNode* tree) {  
        if (tree->left != NULL)  
            in_order(tree->left);  
        std::cout << tree->value << std::endl;  
        if (tree->right != NULL)  
            in_order(tree->right);  
    }  
      
    struct BinTreeNode* Delete(struct BinTreeNode *root,int value){// function called delete that takes pointer to root node and data to be deleted as argument.;  
        if(root == NULL) return root;  
        else if(value < root ->value) root-> left = Delete(root->left,value);//if the data we are looking for is less than the data in root its in the left sub tree  
        else if(value > root ->value) root->right = Delete(root->right,value);  
      
        else{  
                // case1: No Child  
            if(root->left == NULL && root-> right == NULL){  
                delete root;  
                root = NULL;  
                return root;  
            }  
        //case 2: one child  
        else if(root->left == NULL){  
            struct BinTreeNode*temp = root;  
            root = root->left;  
            delete temp;  
            return root;  
            }  
        else if(root->right==NULL){  
            struct BinTreeNode*temp = root;  
            root = root->left;  
            delete temp;  
            return root;  
        }  
        //case 3: 2 children  
        else{  
            struct BinTreeNode*temp = MinimumValue(root->right);  
            root->value = temp->value;  
            root->right = Delete(root->right,temp->value);  
            return root;  
            }  
      
        }  
      
      
    }  
      
    int main(int argc, char *argv[])  
    {  
        BinTreeNode* root = NULL;  
        BinTreeNode* t = tree_insert(0, 6);  
        tree_insert(t, 10);  
        tree_insert(t, 5);  
        tree_insert(t, 2);  
        tree_insert(t, 3);  
        tree_insert(t, 4);  
        tree_insert(t, 11);  
        root = Delete(t,3);  
        in_order(t);  
        return 0;  
    }  

